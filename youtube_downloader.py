import tkinter as tkfrom tkinter import ttk, filedialog, messageboximport threadingimport osimport sysimport pyperclipimport timefrom yt_dlp import YoutubeDLfrom PIL import Image, ImageTkimport urllib.requestimport io# مسیرهای داخلی برای فایل‌های پیوست‌شده (EXE حالت)def resource_path(relative_path):    try:        base_path = sys._MEIPASS    except Exception:        base_path = os.path.abspath(".")    return os.path.join(base_path, relative_path)class YouTubeDownloaderApp:    def __init__(self, root):        self.root = root        self.root.title("دانلود از یوتیوب - نگارش 1.0 - رایگان")        self.root.geometry("720x850")        self.root.resizable(True, True)        try:            self.root.iconbitmap(resource_path("my_icon.ico"))        except:            pass        self.link_var = tk.StringVar()        self.proxy_enabled = tk.BooleanVar(value=False)        self.proxy_ip = tk.StringVar(value="127.0.0.1")        self.proxy_port = tk.StringVar(value="62051")        self.output_path = tk.StringVar(value=os.getcwd())        self.selected_format = tk.StringVar()        self.title_var = tk.StringVar()        self.thumb_img = None        self.is_downloading = False        self.show_thumbnail = tk.BooleanVar(value=True)        self.build_scrollable_ui()    def build_scrollable_ui(self):        main_frame = tk.Frame(self.root)        main_frame.pack(fill=tk.BOTH, expand=True)        canvas = tk.Canvas(main_frame)        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)        canvas.configure(yscrollcommand=scrollbar.set)        canvas.bind('<Configure>', lambda e: canvas.configure(scrollregion=canvas.bbox("all")))        self.form_frame = tk.Frame(canvas)        canvas.create_window((0, 0), window=self.form_frame, anchor="nw")        self.setup_ui()    def setup_ui(self):        tk.Label(self.form_frame, text="حکومتی که به قانون اساسی پایبند نباشد خائن است",                 font=("Arial", 12, "bold"), fg="red").pack(pady=10)        # لینک        link_frame = tk.Frame(self.form_frame)        tk.Label(link_frame, text="لینک یوتیوب:").pack(side=tk.LEFT, padx=5)        tk.Entry(link_frame, textvariable=self.link_var, width=60).pack(side=tk.LEFT)        tk.Button(link_frame, text="📋 پیست", command=self.paste_clipboard).pack(side=tk.LEFT, padx=5)        link_frame.pack(pady=10)        # پراکسی        proxy_frame = tk.Frame(self.form_frame)        tk.Checkbutton(proxy_frame, text="استفاده از پراکسی", variable=self.proxy_enabled,                       command=self.toggle_proxy_fields).pack(side=tk.LEFT, padx=5)        tk.Label(proxy_frame, text="IP:").pack(side=tk.LEFT)        self.proxy_ip_entry = tk.Entry(proxy_frame, textvariable=self.proxy_ip, width=15)        self.proxy_ip_entry.pack(side=tk.LEFT)        tk.Label(proxy_frame, text="پورت:").pack(side=tk.LEFT)        self.proxy_port_entry = tk.Entry(proxy_frame, textvariable=self.proxy_port, width=8)        self.proxy_port_entry.pack(side=tk.LEFT)        proxy_frame.pack(pady=10)        self.toggle_proxy_fields()        # مسیر ذخیره‌سازی        path_frame = tk.Frame(self.form_frame)        tk.Label(path_frame, text="📁 مسیر ذخیره‌سازی:").pack(side=tk.LEFT)        tk.Label(path_frame, textvariable=self.output_path, fg="blue").pack(side=tk.LEFT, padx=10)        tk.Button(path_frame, text="تغییر مسیر", command=self.browse_path).pack(side=tk.LEFT)        path_frame.pack(pady=10)        # نمایش بندانگشتی        tk.Checkbutton(self.form_frame, text="نمایش تصویر بندانگشتی", variable=self.show_thumbnail).pack(pady=5)        # بررسی کیفیت‌ها        tk.Button(self.form_frame, text="🔍 بررسی کیفیت‌ها", command=self.fetch_formats).pack(pady=10)        # عنوان        tk.Label(self.form_frame, textvariable=self.title_var, font=("Arial", 11, "bold")).pack(pady=5)        # تصویر بندانگشتی        self.thumbnail_label = tk.Label(self.form_frame)        self.thumbnail_label.pack(pady=5)        # انتخاب کیفیت        tk.Label(self.form_frame, text="🎞 انتخاب کیفیت:", font=("Arial", 11)).pack(pady=5)        self.format_combo = ttk.Combobox(self.form_frame, state="readonly", width=85, textvariable=self.selected_format)        self.format_combo.pack(pady=5)        self.progress = ttk.Progressbar(self.form_frame, orient="horizontal", length=500, mode="determinate")        self.progress.pack(pady=15)        self.download_button = tk.Button(self.form_frame, text="⬇️ دانلود", command=self.start_download, font=("Arial", 12))        self.download_button.pack(pady=10)        btn_frame = tk.Frame(self.form_frame)        tk.Button(btn_frame, text="❌ کنسل", command=self.cancel_download, font=("Arial", 11)).pack(side=tk.LEFT, padx=10)        btn_frame.pack(pady=5)        self.status_label = tk.Label(self.form_frame, text="", fg="blue", font=("Arial", 11))        self.status_label.pack(pady=10)        tk.Label(self.form_frame, text="📋 گزارش عملیات:", font=("Arial", 11)).pack()        # log text با اسکرول        log_frame = tk.Frame(self.form_frame)        log_frame.pack(pady=5)        self.log_text = tk.Text(log_frame, height=10, width=85, wrap="word")        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)        log_scroll = ttk.Scrollbar(log_frame, command=self.log_text.yview)        log_scroll.pack(side=tk.RIGHT, fill=tk.Y)        self.log_text.configure(yscrollcommand=log_scroll.set)        # لوگو        try:            logo = tk.PhotoImage(file=resource_path("my_logo.png"))            tk.Label(self.form_frame, image=logo).pack(pady=5)            self.root.logo = logo        except:            pass    def toggle_proxy_fields(self):        state = 'normal' if self.proxy_enabled.get() else 'disabled'        self.proxy_ip_entry.config(state=state)        self.proxy_port_entry.config(state=state)    def paste_clipboard(self):        try:            self.link_var.set(pyperclip.paste())        except Exception as e:            messagebox.showerror("خطا", f"خطا در گرفتن متن از حافظه:\n{e}")    def browse_path(self):        folder = filedialog.askdirectory()        if folder:            self.output_path.set(folder)    def fetch_formats(self):        link = self.link_var.get().strip()        if not link:            messagebox.showwarning("خطا", "لطفاً لینک را وارد کنید.")            return        self.status_label.config(text="⏳ در حال دریافت کیفیت‌ها...")        threading.Thread(target=self._fetch_formats_thread, args=(link,), daemon=True).start()    def _fetch_formats_thread(self, link):        try:            ydl_opts = {'quiet': True}            if self.proxy_enabled.get():                proxy = f"http://{self.proxy_ip.get().strip()}:{self.proxy_port.get().strip()}"                ydl_opts["proxy"] = proxy            with YoutubeDL(ydl_opts) as ydl:                info = ydl.extract_info(link, download=False)                self.title_var.set(f"🎬 عنوان: {info.get('title', '')}")                if self.show_thumbnail.get():                    try:                        thumb_url = info.get("thumbnail")                        if thumb_url:                            data = urllib.request.urlopen(thumb_url).read()                            img = Image.open(io.BytesIO(data)).resize((300, 180))                            self.thumb_img = ImageTk.PhotoImage(img)                            self.thumbnail_label.config(image=self.thumb_img)                    except:                        self.thumbnail_label.config(image="")                formats = info.get("formats", [])                display_list = [f"{f['format_id']} - {f['ext']} - {f.get('format_note', '')} - {f.get('filesize', 0)//1024//1024}MB"                                for f in formats if f.get('format_id')]                self.format_combo["values"] = display_list                if display_list:                    self.format_combo.current(0)                self.status_label.config(text="✅ کیفیت‌ها دریافت شدند.")        except Exception as e:            self.status_label.config(text="❌ خطا در دریافت اطلاعات.")            self.log_text.insert(tk.END, f"\n{str(e)}\n")    def start_download(self):        if not self.link_var.get() or not self.selected_format.get():            messagebox.showwarning("خطا", "لطفاً لینک و کیفیت را وارد کنید.")            return        self.download_button.config(state="disabled")        self.root.after(10000, lambda: self.download_button.config(state="normal"))        threading.Thread(target=self._download_thread, daemon=True).start()    def _download_thread(self):        self.log_text.delete("1.0", tk.END)        self.status_label.config(text="")        self.progress["value"] = 0        self.is_downloading = True        format_code = self.selected_format.get().split()[0]        link = self.link_var.get().strip()        ydl_opts = {            'format': format_code,            'outtmpl': os.path.join(self.output_path.get(), '%(title)s.%(ext)s'),            'noplaylist': True,            'progress_hooks': [self.hook],        }        if self.proxy_enabled.get():            proxy = f"http://{self.proxy_ip.get().strip()}:{self.proxy_port.get().strip()}"            ydl_opts['proxy'] = proxy        try:            with YoutubeDL(ydl_opts) as ydl:                ydl.download([link])            self.status_label.config(text="✅ دانلود با موفقیت انجام شد.")        except Exception as e:            self.status_label.config(text="❌ خطا در دانلود.")            self.log_text.insert(tk.END, f"\nException: {str(e)}\n")        finally:            self.is_downloading = False    def hook(self, d):        if d['status'] == 'downloading':            try:                percent = d.get("_percent_str", "").strip().replace('%', '')                self.progress["value"] = float(percent)                self.log_text.insert(tk.END, d.get("_default_template", "") + "\n")                self.log_text.see(tk.END)            except:                pass    def cancel_download(self):        # در نسخه yt_dlp پایتونی توقف وسط کار نیاز به پیاده‌سازی پیشرفته‌تر دارد        messagebox.showinfo("توجه", "توقف در این نسخه پشتیبانی نمی‌شود.")if __name__ == "__main__":    root = tk.Tk()    app = YouTubeDownloaderApp(root)    root.mainloop()#pyinstaller --noconfirm --onefile --windowed --icon=my_icon.ico --add-data "my_logo.png;." --hidden-import=yt_dlp --hidden-import=pyperclip --collect-all yt_dlp --collect-all ssl --collect-all _ssl --collect-all certifi youtube_downloader.py#pyinstaller --noconfirm --onefile --windowed --icon=my_icon.ico --add-data "my_logo.png;." --hidden-import=yt_dlp --hidden-import=pyperclip --collect-all yt_dlp --collect-all ssl --collect-all _ssl --collect-binaries certifi youtube_downloader.py